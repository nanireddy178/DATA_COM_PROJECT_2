import sys
import socket
import time
import os
import errno
import fcntl

MAX_TRIES = 5
WAIT_TIME = 2  # seconds

class Iface:
    def __init__(self, ifacename, ipaddr, macaddr, lanname):
        self.ifacename = ifacename
        self.ipaddr = ipaddr
        self.macaddr = macaddr
        self.lanname = lanname

class Rtable:
    def __init__(self, destsubnet, nexthop, mask, ifacename):
        self.destsubnet = destsubnet
        self.nexthop = nexthop
        self.mask = mask
        self.ifacename = ifacename

class Host:
    def __init__(self, name, addr):
        self.name = name
        self.addr = addr

def read_hostnames(hosts_file):
    hostnames = []
    with open(hosts_file, 'r') as file:
        for line in file:
            parts = line.split()
            if len(parts) == 2:
                name = parts[0]
                addr = parts[1]
                host_info = Host(name, addr)
                hostnames.append(host_info)
    return hostnames

def read_interface(ifaces_file):
    interfaces = {}
    with open(ifaces_file, 'r') as file:
        for line in file:
            parts = line.split()
            if len(parts) == 5:
                iface_name = parts[0]
                ip_address = parts[1]
                mac_address = parts[3]
                lan_name = parts[4]

                interface_info = Iface(iface_name, ip_address, mac_address, lan_name)
                interfaces[iface_name] = interface_info
    return interfaces

def read_routing_table(rtables_file):
    routing_table = []
    with open(rtables_file, 'r') as file:
        for line in file:
            parts = line.split()
            if len(parts) == 4:
                dest_subnet = parts[0]
                next_hop = parts[1]
                mask = parts[2]
                iface_name = parts[3]

                routing_info = Rtable(dest_subnet, next_hop, mask, iface_name)
                routing_table.append(routing_info)
    return routing_table

def connect_to_bridge(interface_info):
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    ip_address = interface_info.ipaddr
    lan_name = interface_info.lanname
    
    # Read symbolic link files to get IP address/port number of bridge (server)
    bridge_ip_filename = f"{lan_name}.addr"
    bridge_port_filename = f"{lan_name}.port"
    
    # Read bridge IP address and port from symbolic link files
    try:
        with open(bridge_ip_filename, 'r') as file:
            bridge_hostname = file.read().strip()
        with open(bridge_port_filename, 'r') as file:
            bridge_port = int(file.read().strip())
    except FileNotFoundError as e:
        print(f"Symbolic link files for bridge not found: {e}")
        return False

    try_count = 0
    while try_count < MAX_TRIES:
        try:
            client_socket.connect((bridge_hostname, bridge_port))
            print(f"Connected to bridge at {bridge_hostname}:{bridge_port}")
            fcntl.fcntl(client_socket, fcntl.F_SETFL, os.O_NONBLOCK)  # Set socket to non-blocking mode
            print("Success")  # Print "Success" on successful connection
            return True  # Connection successful
        except socket.error as e:
            if e.errno == errno.ECONNREFUSED or e.errno == errno.EAGAIN or e.errno == errno.EWOULDBLOCK:
                print(f"Connection attempt {try_count+1} failed: {e}")
                try_count += 1
                time.sleep(WAIT_TIME)  # Wait for a preset amount of time before each try
            else:
                print("Unexpected error:", e)
                break
    
    return False  # Couldn't connect after maximum tries

if __name__ == "__main__":
    if len(sys.argv) != 5 or sys.argv[1] != "-no":
        print("Usage: station -no interface routingtable hostname")
    else:
        interface_file = sys.argv[2]
        routing_table_file = sys.argv[3]
        hosts_file = sys.argv[4]

        hostnames = read_hostnames(hosts_file)
        interfaces = read_interface(interface_file)
        routing_tables = read_routing_table(routing_table_file)

        # Print hostnames and their corresponding IP addresses
        print("Hostnames and IP addresses:")
        for host_info in hostnames:
            print(f"Hostname: {host_info.name}, IP Address: {host_info.addr}")

        # Print interface information
        print("\nInterface information:")
        for iface_name, iface_info in interfaces.items():
            print(f"Interface Name: {iface_info.ifacename}")
            print(f"IP Address: {iface_info.ipaddr}")
            print(f"MAC Address: {iface_info.macaddr}")
            print(f"LAN Name: {iface_info.lanname}")
            print("-------------------------")

        # Print routing table entries
        print("\nRouting table entries:")
        for route in routing_tables:
            print(f"Destination Subnet: {route.destsubnet}")
            print(f"Next Hop: {route.nexthop}")
            print(f"Mask: {route.mask}")
            print(f"Interface Name: {route.ifacename}")
            print("-------------------------")

        for interface_name, interface_info in interfaces.items():
            connected = connect_to_bridge(interface_info)
            if not connected:
                print(f"Connection to bridge failed for interface {interface_name}")
